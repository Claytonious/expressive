{
  "name": "Expressive",
  "tagline": "A multi-platform expression parsing and evaluating framework",
  "body": "# Expressive\r\n\r\nExpressive is a multi-platform expression parsing and evaluation framework.\r\n\r\n## Design and Implementation\r\nThere are 3 main stages of the parsing/evaluation of an Expression.\r\n\r\n1. Tokenising - this deals with walking through the characters in the expression and matching the items against the known set of `Operators`, `Functions` and `Values`.\r\n2. Compiling - once the `Expression` has been tokenised the set of tokens is then used to build a tree of internal `IExpression` nodes.\r\n3. Evaluation - each individual `IExpression` node is then evaluated to determine it's result and eventually the overall result of the top level `Expression`.\r\n\r\n### Lazy Parameter evaluation\r\nEach individual `parameter` will only be evaluated at the point of being used within its `IExpression` node. This will prevent parts of an expression being evaluated should the result already be determined (e.g. when the left hand side of an && (logical AND) operator being `false`). \r\n\r\n### Error handling\r\n\r\nThe `Expression` will terminate early in the following situations:\r\n1. Any part of the tokenising process fails (i.e. unrecognised tokens).\r\n2. If any of the `Function`s are supplied with an incorrect number of parameters.\r\n\r\nThe supported languages are:\r\n\r\n- C&#35;\r\n- Java (TBA)\r\n- Swift (TBA)\r\n\r\n## Usage Examples\r\n\r\n### C&#35;\r\n\r\n#### Simple Evaluation\r\n```c\r\nvar expression = new Expression(\"1+2\");\r\nvar result = expression.Evaluate();\r\n```\r\n\r\n#### Custom options\r\n```c\r\npublic enum ExpressiveOptions\r\n{\r\n    /// <summary>\r\n    /// Specifies that no options are set.\r\n    /// </summary>\r\n    None = 1,\r\n    /// <summary>\r\n    /// Specifies case-insensitive matching.\r\n    /// </summary>\r\n    IgnoreCase = 2,\r\n    /// <summary>\r\n    /// No-cache mode. Ignores any pre-compiled expression in the cache.\r\n    /// </summary>\r\n    NoCache = 4,\r\n    /// <summary>\r\n    /// When using Round(), if a number is halfway between two others, it is rounded toward the nearest number that is away from zero.\r\n    /// </summary>\r\n    RoundAwayFromZero = 8,\r\n    /// <summary>\r\n    /// All options are used.\r\n    /// </summary>\r\n    All = IgnoreCase | NoCache | RoundAwayFromZero,\r\n}\r\n\r\n// Use in any combination.\r\nvar expression = new Expression(\"1+2\", ExpressiveOptions.IgnoreCase | ExpressiveOptions.NoCache);\r\nvar result = expression.Evaluate();\r\n```\r\n\r\n#### Variables\r\n```c#\r\nvar expression = new Expression(\"1 * [variable]\");\r\nvar result = expression.Evaluate(new Dictionary<string, object> { [\"variable\"] = 2);\r\n```\r\n\r\n#### Built-in Functions\r\nExpressive provides a standard set of functions (see Functions).\r\n```c#\r\nvar expression = new Expression(\"sum(1,2,3,4)\");\r\nvar result = expression.Evaluate();\r\n```\r\n\r\n#### Custom Functions\r\nCustom functions allow you to register your own set of funcitonality in order to extend the current set. There are 2 methods of registering a custom function:\r\n\r\n* `IFunction` implementation.\r\n\r\n```c#\r\ninternal class AbsFunction : IFunction\r\n{\r\n    #region IFunction Members\r\n\r\n    public IDictionary<string, object> Variables { get; set; }\r\n\r\n    public string Name { get { return \"Asin\"; } }\r\n\r\n    public object Evaluate(IExpression[] parameters)\r\n    {\r\n        return Math.Asin(Convert.ToDouble(parameters[0].Evaluate(Variables)));\r\n    }\r\n\r\n    #endregion\r\n}\r\n\r\nvar expression = new Expression(\"Abs(1)\");\r\nexpression.RegisterFunction(new AbsFunction());\r\nvar result = expression.Evaluate();\r\n```\r\n\r\n* Lambda callback.\r\n\r\n```c#\r\nvar expression = new Expression(\"myfunc(1)\");\r\nexpression.RegisterFunction(\"myfunc\", (p, v) =>\r\n{\r\n    // p = parameters\r\n    // v = variables\r\n    return p[0].Evaluate(v);\r\n});\r\nvar result = expression.Evaluate();\r\n```\r\n\r\n#### Retrieve referenced variables\r\nCompiles the expression and returns an array of the variable names contained within the expression.\r\n```c#\r\nvar expression = new Expression(\"[abc] + [def] * [ghi]\");\r\nvar variables = expression.ReferencedVariables;\r\n```\r\n\r\n#### Asynchronous evaluation\r\nUseful for when an evaluation might take a long time (i.e. a function that deals with a  long running background tasks such as loading from the database).\r\n```c\r\nvar expression = new Expression(\"1+2\");\r\nexpression.EvaluateAsync((r) =>\r\n{\r\n    var result = r;\r\n});\r\n```\r\n\r\n## General functionality\r\n\r\n### Operators\r\n\r\n| Name                   | Operator          | Usage                   |\r\n| ---------------------- | ----------------- |-------------------------|\r\n| Add                    | +                 | 1 + 2                   |\r\n| Unary plus             | +                 | +2                      |\r\n| Subtract               | -                 | 1 - 2                   |\r\n| Unary minus            | -                 | -2                      |\r\n| Multiply               | *                 | 2 * 2                   |\r\n| Divide                 | /                 | 2 / 2                   |\r\n| Modulus                | %                 | 6 % 2                   |\r\n| Equals                 | =, ==             | 1 == 1                  |\r\n| Not equals             | !=, <>            | 1 <> 2                  |\r\n| Greater than           | >                 | 2 > 1                   |\r\n| Greater than or equal  | >=                | 2 >= 2                  |\r\n| Less than              | <                 | 1 < 2                   |\r\n| Less than or equal     | <=                | 2 <= 2                  |\r\n| Boolean AND            | &&, AND           | true && false           |\r\n| Boolean OR             | &#124;&#124;, OR  | true &#124;&#124; false |\r\n| Bitwise AND            | &      \t         | 2 & 2                   |\r\n| Bitwise OR             | &#124;            | 2 &#124; 2              |\r\n| Bitwise XOR            | ^                 | 2 ^ 2                   |\r\n| Bitwise NOT            | ~                 | 2 ~ 2                   |\r\n| Left shift             | <<                | 2 << 2                  |\r\n| Right shift            | >>                | 2 >> 2                  |\r\n\r\n### Functions\r\n\r\n| Function           | Usage                         | Parameters                    |\r\n| ------------------ | ----------------------------- | ------------------------------ |\r\n| Abs                | Abs(-1)                       | Expects **exactly 1** parameter. |\r\n| Acos               | Acos(1)                       | Expects **exactly 1** parameter. |\r\n| Asin               | Asin(0)                       | Expects **exactly 1** parameter. |\r\n| Atan               | Atan(0)                       | Expects **exactly 1** parameter. |\r\n| Average            | Average(1,2,3,4)              | Expects **at least 1** parameter. |\r\n| Ceiling            | Ceiling(1.5)                  | Expects **exactly 1** parameter. |\r\n| Cos                | Cos(0)                        | Expects **exactly 1** parameter. |\r\n| EndsWith           | EndsWith('end')               | Expects **exactly 1** parameter. |\r\n| Exp                | Exp(0)                        | Expects **exactly 1** parameter. |\r\n| Floor              | Floor(1.5)                    | Expects **exactly 1** parameter. |\r\n| IEEERemainder      | IEEERemainder(3, 2)           | Expects **exactly 2** parameters. |\r\n| If                 | If(1 == 1, 'true', 'false')   | Expects **exactly 3** parameters. |\r\n| In                 | In(1, 1, 2, 3, 4)             | Expects **at least 2** parameters. |\r\n| Log                | Log(1, 10)                    | Expects **exactly 2** parameters. |\r\n| Log10              | Log10(1)                      | Expects **exactly 1** parameter. |\r\n| Max                | Max(1, 2)                     | Expects **at least 1** parameter. |\r\n| Mean               | Mean(1, 2)                    | Expects **exactly 2** parameters. |\r\n| Median             | Median(1, 2)                  | Expects **exactly 2** parameters. |\r\n| Min                | Min(1, 2)                     | Expects **at least 1** parameter. |\r\n| Mode               | Mode(1, 2)                    | Expects **exactly 2** parameters. |\r\n| PadLeft            | PadLeft([number], 3, '0')     | Expects **exactly 3** parameters. |\r\n| Pow                | Pow(3, 2)                     | Expects **exactly 2** parameters. |\r\n| Random             | Random()                      | Expects **no** parameters. |\r\n| Round              | Round(4.5234, 2)              | Expects **exactly 2** parameters. |\r\n| Sign               | Sign(-10)                     | Expects **exactly 1** parameter. |\r\n| Sin                | Sin(0)                        | Expects **exactly 1** parameter. |\r\n| Sqrt               | Sqrt(4)                       | Expects **exactly 1** parameter. |\r\n| StartsWith         | StartsWith('start')           | Expects **exactly 1** parameter. |\r\n| Sum                | Sum(0, 2, 3, 4)               | Expects **at least 1** parameter. |\r\n| Tan                | Tan(0)                        | Expects **exactly 1** parameter. |\r\n| Truncate           | Truncate(1.7)                 | Expects **exactly 1** parameter. |\r\n\r\n### Values\r\n\r\n| Name                | Usage                   |\r\n| ------------------- | ----------------------- |\r\n| Variable            | [parametername]         |\r\n| String              | \"abc\", 'abc'            |\r\n| DateTime            | #2015/12/25#, #Today#, #Now#            |\r\n| Integer             | 123                     |\r\n| Boolean             | true, false             |\r\n| Floating point      | 123.456                 |\r\n| Scientific notation | 1.22e2                  |\r\n| null                | null                    |",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}